import streamlit as st


def geom_elem():
    st.title("Геометрические элементы")

    """
    Геометрический модуль в Gmsh предоставляет возможности простейшей CAD системы и использует метод граничного представления
    (boundary representation, BRep) для задания геометрических объектов, когда объемная форма задается путем описания ее границ.

    Для определения геометрии необходимо задать точки (**Point**), затем линии (**Line**, **Circle**, **Ellipse**, **Spline**), 
    поверхности (**Plane Surface**, **Ruled Surface**) и, наконец, задать объемы (**Volume**).

    У каждого геометрического примитива имеется идентификационный номер **id**, который присваивается при их создании.
    """

    st.subheader("Точка (Point) ")

    code = """Point(id) = {x, y, z, size};"""
    st.code(code)

    st.subheader("Линии")

    """* **Создание прямого отрезка**"""
    code = """Line(id) = {id1, id2};"""
    st.code(code)

    """* **Создание дуги окружности** (строго меньшей $\pi$)"""
    code = """Circle(id) = {id1, id2, id3};"""
    st.code(code)

    """
    &emsp; id1 - начальная точка \n
    &emsp; id2 - центральная точка \n
    &emsp; id3 - конечная точка \n
    """

    """* **Создание дуги эллипса**"""
    code = """Ellipse(id) = {id1, id2, id3, id4};"""
    st.code(code)

    """
    &emsp; id1 - начальная точка \n
    &emsp; id2 - центральная точка \n
    &emsp; id3 - точка на главной оси эллипса \n
    &emsp; id4 - конечная точка \n
    """

    """* **Создание замкнутой линии**"""
    code = """Line Loop(id) = {id1, id2, ..., idN};"""
    st.code(code)


    st.subheader("Поверхности")

    """* **Создание плоской поверхности**"""
    code = """Plane Surface(id) = {id1, id2, ..., idN};"""
    st.code(code)

    """
    &emsp; В фигурных скобках задаются идентификационные номера замкнутых линий. Внешние границы поверхности
    определяет первая замкнутая линия, остальные линии определяют
    внутренние границы поверхности (отверстия)
    """

    """* **Создание изогнутой поверхности**"""
    code = """Ruled Surface(id) = {id1, id2, ..., idN};"""
    st.code(code)

    """* **Создание контура поверхностей (замкнутая оболочка)**"""
    code = """Surface Loop(id) = {id1, id2, ..., idN};"""
    st.code(code)

    """&emsp; В фигурных скобках задаются идентификационные номера поверхно-
    стей, которые собираются в группу"""

    st.subheader("Объем")
    code = """Volume(id) = {id1, id2, ..., idN};"""
    st.code(code)
    """&emsp; В фигурных скобках задаются идентификационные номера замкнутых оболочек. Внешние
    границы объема определяет первая оболочка, а все остальные оболочки определяют внутренние границы объема (отверстия)."""


def work_with_elem():
    st.title("Команды для работы с геометрическими объектами")

    """
    Линии, поверхности и объемы также могут быть созданы путем
    вытягивания точек, линий и поверхностей, соответственно. Для этого
    используется команда **Extrude**.
    """

    """
    * **Вытягивание вдоль вектора (x, y, z)**
    """
    code = """Extrude{x, y, z} {object;}"""
    st.code(code)

    """
    * **Вытягивание с поворотом**
    """
    code = """Extrude{ {x1, y1, z1}, {x2, y2, z2}, angle} {object;}"""
    st.code(code)
    """
    &emsp; (x1, y1, z1) - координаты направляющий вектор оси вращения \n
    &emsp; (x1, y1, z1) - точка на оси вращения\n
    &emsp; angle - угол поворота в радианах \n
    """


    """К геометрическим объектам можно применять команды преобразования, которые могут быть применены как к самим объектам, так
    и к их копиям, созданным с использованием команды **Duplicata**."""

    """* **Поворот геометрического объекта на угол angle**"""
    code = """Rotate{ {x1, y1, z1}, {x2, y2, z2}, angle} {object;}"""
    st.code(code)

    """* **Перемещение геометрического объекта вдоль вектора**"""
    code = """Translate{x, y, z} {object;}"""
    st.code(code)

    """* **Перемещение геометрического объекта симметрично относительно плоскости**"""
    code = """Symmetry{A, B, C, D} {object;}"""
    st.code(code)

    """* **Увеличение или уменьшение геометрического объекта согласно параметру factor**"""
    code = """Dilate{ {x, y, z}, factor} {object;}"""
    st.code(code)


def main():
    menu = st.sidebar.radio("Подразделы",
        (   
            ":blue[Геометрические элементы]",
            ":green[Работа с геом. элементами]",
        ),
    )

    if menu == ":blue[Геометрические элементы]":
        geom_elem()

    if menu == ":green[Работа с геом. элементами]":
        work_with_elem()

if __name__ == "__main__":
    main()
