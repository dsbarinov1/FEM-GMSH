
import streamlit as st
import datetime
from st_pages import Page, show_pages, add_page_title
import numpy as np
import streamlit as st
# import gmsh

st.title("Файл геометрии")
st.subheader("Способы задания геометрии")

r"""

Для задания геометрии модели существует 4 способа:

1. Интерактивное задание геометрии в окне Gmsh
2. Написание .geo файла на встроенном языке Gmsh
3. Задание геометрии внутри скрипта на языке Python с помощью модуля gmsh
4. Импорт модели из CAD программ через различные форматы (.step, .brep, .stl и другие)

Первые 2 способа позволяют задать геометрию собственными средствами Gmsh. 

Для использования 3 способа необходима установка Python и импорт библиотеки gmsh. 

Для использования 4 способа необходимо иметь дополнительную программу, в которой модель будет спроектирована, а затем экспортирована в формате, который Gmsh сможет прочитать.
"""

st.subheader("Построение геометрии через файл")

r"""
Геометрию тела можно задавать сразу в .geo файле, используя встроенный язык Gmsh, как было упомянуто выше.
"""
st.markdown("""

Как понятно из расширения, .geo (сокр. от geometry) файл - это файл, где задается геометрия для Gmsh. По формату это обычный текстовый файл. Поэтому один из способов - создать файл с расширением .txt, а затем переименовать его. Загрузить .geo файл можно запустив Gmsh, а затем открыв через меню File->Open. 
            
Другой способ - передать .geo файл в качестве параметра при запуске Gmsh'а в командной строке:
""")

code = r'''
gmsh filename.geo
'''
st.code(code, language="bash")

r"""
При этом, если файла с таким именем (filename.geo) не существует, он будет создан.
"""

st.subheader("Структура файла геометрии")

r"""
Файл задания геометрии имеет следующую структуру:
- Точки
- Линии
- Замкнутые контуры из линий
- Поверхности
- Замкнутые контуры из поверхностей
- Объемы
- Физические сущности

Вообще говоря, это структура файла, задающего геометрию объемной фигуры. Если нужно задать геометрию только поверхности, то, очевидно, нужно опустить пункты 5 и 6.
В любом месте файла могут быть инициализированы переменные (объявлять их не нужно). Они используются для параметризации модели.
"""

st.subheader("Пример двумерной модели")
r"Зададим теперь геометрию модели, представленной на рисунке"
st.image('2D.png', caption='Двумерная модель')

r"""
Рассмотрим область P, состоящую из двух непересекающихся подобластей: P1 и P2, соответствующих материалам с различными физическими свойствами. Пусть P1 - область внутри окружности, P2 - все остальное. При этом, чтобы воспользоваться классическим МКЭ, необходимо иметь согласованную сетку во всей области P. Помимо прочего, допустим, нам необходимо задать на нижней границе области краевое условие (неважно какое).

Создадим файл 2d.geo и реализуем начальную геометрию, а именно - зададим точки границ подобластей:
"""

code1 = r'''
// инициализация переменных
x0 = 0;
x1 = 1;
y0 = 0;
y1 = 1;
x_c = (x0 + x1) / 2;
y_c = (y0 + y1) / 2;
cl_1 = 0.2;
cl_2 = 0.1;
rad = 0.25;

If (2 * rad >= x1 - x0 || 2 * rad >= y1 - y0)
  Printf("Error! Diameter is too large!");
  //Exit;
EndIf

// точки прямоугольника
Point(1) = {x0, y0, 0, cl_1};
Point(2) = {x1, y0, 0, cl_1};
Point(3) = {x0, y1, 0, cl_1};
Point(4) = {x1, y1, 0, cl_1};

// точки окружности
Point(10) = {x_c, y_c, 0, cl_2};
Point(11) = {x_c-rad, y_c, 0, cl_2};
Point(12) = {x_c+rad, y_c, 0, cl_2};
Point(13) = {x_c, y_c-rad, 0, cl_2};
Point(14) = {x_c, y_c+rad, 0, cl_2};
'''
st.code(code1, language='bash')
# строка 0: В файлы задания геометрии можно вставлять комментарии - либо // (тогда будет комментироваться строка, начиная с // и до конца строки), либо /*...*/ (тогда комментируется часть текста). Т.е. использование комментариев здесь такое же как в С.
# строка 1: Как я уже говорил, в процессе задания геометрии можно (и нужно!) использовать переменные для параметризации модели. Ведь, допустим, квадрат на приведенной выше картинке может оказать прямоугольником, или может измениться его расположение относительно начала координат. В любом случае использование переменных очень удобно. Кстати, их не нужно объявлять, как в С. И еще важный момент - все переменные в языке Gmsh имеют только 2 типа - вещественный и строковый (да-да, даже в операторе цикла For переменная-счетчик имеет вещественный тип. ужас, правда? :) ).
# строки 1-4: В данном случае мы инициализируем координаты границ прямоугольника.
# строки 5-6: Координаты центра окружности. В данном случае окружность находится в центре прямоугольника.
# строки 7-8: Характеристическая длина (characteristic length = cl). Она определяет "мелкость" сетки. Чем больше cl, тем грубее сетка.
# строка 9: Радиус окружности.
# строки 10-13: Прежде чем строить геометрию, проверим основные параметры. Например, диаметр окружности должен быть меньше каждой из сторон прямоугольника. Аналогичным образом можно проверить, что x1 > x0 и т.д. Обратите внимание на ключевые слова условного оператора If EndIf. Регистр очень важен! Необходимо также отметить, что конструкция If Else EndIf не поддерживается! И еще. Обратите внимание на строку 12. Там закомментирован выход из Gmsh в случае неправильно заданных параметров. Если раскомментировать его и задать неверные исходные данные, Gmsh выдаст в консоль сообщений ошибку "Error! Diameter is too large!" и сразу же закроется, так что вы даже не успеете ничего прочитать. Если же оставить код таким как есть и задать неверные исходные данные, то Gmsh выдаст сообщение об ошибке, но не покажет его (!) (это актуально для версии Gmsh 2.4.2 - если вы пользуетесь другой версией, возможно, поведение будет другим). Чтобы увидеть сообщение, необходимо вручную открыть консоль сообщений. Делается это через меню Tools -> Message Console (или через горячую клавишу Ctrl+L).
# строки 14-22: Собственно, задание точек геометрии. Формат задания точки: Point(номер точки) = {x, y, z, cl}; Номер должен быть уникальным (в рамках нумерации точек), но не обязательно последовательным. Так, например, при задании точек новой фигуры (в данном случае - окружности) удобно начать новую нумерацию. Основное правило задания любых элементов геометрии: () - круглые скобки сообщают новый номер, {} - фигурные скобки - известный номер или данные. Задавать точку можно и без указания характеристической длины: Point(n) = {x, y, z}; В этом случае Gmsh сам назначит ей характеристическую длину, однако управлять сгущением сетки вы уже не сможете.

r"Загрузив файл геометрии в gmsh следующим образом:"
code2 = r'''
gmsh 2d.geo
'''
st.code(code2, language='bash')

r"откроется визуальный интерфейс gmsh и мы увидим следующее:"
st.image('2D_1.png', caption='Двумерная модель')

r"Следующий этап - определение линий. Дополним файл геометрии следующим блоком:"

code3 = r"""
// линии прямоугольника
Line(1) = {1, 2};
Line(2) = {1, 3};
Line(3) = {2, 4};
Line(4) = {3, 4};

// линии окружности
Circle(11) = {11, 10, 13};
Circle(12) = {13, 10, 12};
Circle(13) = {12, 10, 14};
Circle(14) = {14, 10, 11};
"""
st.code(code3, language='bash')
# строки 23-27: Прямые линии задаются командой Line(номер линии) = {начальная точка, конечная точка}; Номер линии должен быть уникальным (в рамках нумерации линий), но не обязательно последовательным. Все так же, как и с нумерацией точек. Обратите внимание, что Line(1) = {1, 2}; не та же самая линия, что и Line(1) = {2, 1}; То есть у всех линий есть направление и оно важно! В связи с этим я для себя определил, что всегда (ну или почти всегда) задаю линии от точки с меньшими координатами к точке с большими координатами (в том смысле, что координаты тем меньше, чем ближе они к точке (0, 0, 0)). И тогда я всегда знаю, куда направлена моя линия.
# строки 28-32: Окружность задается дугами с помощью команды Circle(n) = {начальная точка дуги, центр окружности, конечная точка дуги}; Здесь также важно направление, поэтому я задаю линии в едином обходе - по(против) часовой стрелке(и) - все зависит от того, как смотреть. И еще одна важная особенность, на которой спотыкаются почти все, кто начинает работать со Gmsh'ем: радиус дуги должен быть меньше 180 градусов!!! В самом деле, вы не задумались, зачем для задания окружности мы определили 4 точки на границе? А для того, чтобы задать 4 дуги по 90 градусов каждая! Конечно, можно было определить 3 точки и задать 3 дуги по 120 градусов, но, я считаю, что первый вариант проще.

r"""Загрузив обновленный .geo файл в Gmsh мы увидим следующее:"""
st.image('2D_2.png', caption='Двумерная модель')

r"""
Для того, чтобы построить треугольную сетку, необходимо определить поверхности. А для того, чтобы задать поверхности, нужно определить замкнутые контуры линий:
"""

code4 = r"""
// замкнутый контур прямоугольника
Line Loop(21) = {1, 3, -4, -2};

// замкнутый контур окружности
Line Loop(22) = {11, 12, 13, 14};
"""
st.code(code4, language='bash')

# строки 33-34: Замкнутый контур из любых линий (прямых, дуг, сплайнов - каких угодно) задается командой (обратите внимание на пробел и регистр!) Line Loop(номер контура) = {последовательность линий}; Номер контура должен быть уникален в рамках нумерации линий (!). По крайней мере, так сказано в документации. Однако замечено, что если поставить номер контура, совпадающий с номером какой-нибудь линии, ничего не изменится. А теперь самое важное - последовательность линий. Она не может быть произвольной. Линии должны следовать одна за другой так, чтобы конец одной линии совпадал с началом другой. Вот где нужно вспомнить про ориентацию линий! Так, например, начав с линии 1 (оканчивающейся точкой 2) продолжить можно только линией 3 (начинающейся с точки 2). Однако линия 3 оканчивается точкой 4, а с 4-ой точки ни одна из линий не начинается. В этом случае нужно "повернуть" линию, которая также оканчивается на 4-ую точку. Это линия 4. Для "поворота" линии служит знак "-". Линию 2, кстати, тоже придется повернуть. Этот момент задания геометрии, на самом деле, является самым сложным.
# строки 35-36: Если вы, как и я, для задания линий окружности выберите единое направление, то мучиться с выстраиванием последовательности вам не придется. Здесь все довольно просто.

r"""
В результате определения замкнутых контуров линий в .geo файле модель в сущности не изменится. Мы также еще не можем построить сетку, а вид геометрии останется прежним. Поэтому самое время определить поверхности:
"""

code5 = r"""
// поверхности
Plane Surface(1) = {21, 22};
Plane Surface(2) = {22};
"""
st.code(code5, language='bash')

# строки 37-39: Поверхность можно задать 2-мя командами (обратите внимание на пробел и регистр!): Plane Surface либо Ruled Surface. Plane Surface используется для задания плоских поверхностей, а Ruled Surface - для изогнутых (в документации сказано: "Ruled Surface - это поверхность, которая может быть проинтерполирована с помощью конечноразностной интерполяции"). Поскольку при работе с двумерными моделями последнее не может встретиться в принципе, для задания поверхностей используем команду Plane Surface(номер поверхности) = {основной контур, вложенные контуры...}; Номер поверхности должен быть уникальным в рамках нумерации поверхностей, не обязательно последовательным. А теперь самое интересное. Со строкой 39 все понятно - плоская поверхность задается как замкнутый контур линий, который определяет окружность. Но если мы зададим плоскую поверхность 1 просто как контур 21, то получим несогласованную сетку! То есть в результате мы будем иметь две не связанных друг с другом триангуляции - для прямоугольника и для окружности. Для того, чтобы сетка была согласованной, необходимо из прямоугольного контура "вырезать" контур окружности! Таким образом, мы определим поверхность области P2 (еще не забыли постановку?). Для этого все вложенные контуры, которые мы хотим "вырезать", нужно перечислить через запятую в объявлении поверхности после основного контура. Надеюсь, понятно объяснил :)

r"""После этого, загрузив привычным образом файл геометрии в gmsh и зайдя во вкладку Modules -> Mesh -> 2D получится следующая сетка:"""
st.image('2D_3.png', caption='Двумерная модель')

r"""Для измельчения сетки можно изменить введенные ранее переменные cl_1 и cl_2. Уменьшим их в четыре раза и продемонстрируем результат:"""
st.image('2D_4.png', caption='Двумерная модель')

r"""
Для того, чтобы в дальнейшем использовать сетку, сохраним ее. Для этого существует 2 способа.
1. В меню File выбрать Save As (горячая клавиша Ctrl+S), ввести имя файла с расширением .msh (вообще форматов очень много, но это - родной Gmsh'евский формат) и выбрать тип файла (текстовый версии 1.0 или 2.0, или бинарный версии 2.0). Советую не сохранять в формате ASCII 1.0 - это сильно устаревший вариант. Если сохраните в формате Binary 2.0 - то не сможете его просмотреть глазами, а хотелось бы. Хотя бы пару раз. Поэтому выбирайте формат - ASCII 2.0.
2. В меню File выбрать Save Mesh (горячая клавиша Shift+Ctrl+S). В этом случае сетка сохранится в формате ASCII 2.0 с именем my.msh (при условии, что вы использовали файл геометрии my.geo), т.е. никакой свободы выбора :)
Можно, кстати, построить сетку и сохранить ее с минимальными затратами времени и щелканий мышью. Для этого в командной строке наберите:
"""

code6 = r"""
gmsh my.geo -2
"""
st.code(code6)

r"""
Все просто. Двумерная сетка построится и сохранится с именем my.msh в формате ASCII 2.0. Если вы хотите еще и имя файла сетки задать, то наберите
"""

code7 = r"""
gmsh my.geo -2 -o anothername.msh
"""
st.code(code7)

r"""
Добавьте в командную строку -bin и получите файл сетки в формате Binary 2.0. Конечно, этот способ лишит вас наслаждения наблюдать сетку на экране монитора... Но иногда этого и не нужно.
"""