import streamlit as st


st.title("Библиотеки Python pygmsh и meshio")

st.write("Pygmsh и meshio - это две библиотеки Python, которые могут быть использованы для взаимодействия с GMSH. Pygmsh позволяет создавать геометрию и генерировать сетки в формате GMSH, используя Python-код. Meshio предоставляет универсальный API для чтения и записи различных форматов сеток, включая GMSH.")

st.write("#### Pygmsh")
st.write("""Pygmsh - это библиотека Python для создания геометрии и генерации сеток.
Она позволяет создавать геометрию и генерировать сетки в формате GMSH, используя Python-код.
Pygmsh предоставляет широкий спектр инструментов для создания и модификации геометрии, а также настройки параметров генерации сетки.
Pygmsh предоставляет интерфейс Python для языка сценариев Gmsh. Он направлен на устранение некоторых неудобств Gmsh (например, необходимости вручную назначать идентификатор для каждой создаваемой сущности) и предоставление доступа к функциям Python.

В Gmsh пользователь должен вручную вводить уникальные идентификаторы для каждой созданной точки, кривой или объема. Это может привести к путанице, когда создается много объектов и неясно, какие идентификаторы уже используются.
Некоторые команды Gmsh даже создают новые объекты и таким образом автоматически резервируют идентификаторы. Этот модуль пытается обойти это, предоставляя процедуры в стиле add_point(x), которые возвращают идентификатор.
Чтобы сделать имена переменных в Gmsh уникальными, нужно следить за тем, сколько точек, окружностей и т.д. уже создано. Имена переменных будут p1, p2 и т.д. для точек, c1, c2 и т.д. для кругов и так далее.
""")

st.write("Ниже приведен пример кода на языке Python, который создает квадратную область и генерирует сетку на основе треугольных элементов, используя Pygmsh:")

st.code("""
import pygmsh

with pygmsh.geo.Geometry() as geom:
    # Определение квадратной области
    square = geom.add_rectangle(0, 1, 0, 1, 0, 1)

    # Генерация сетки
    mesh = geom.generate_mesh()

# Визуализация сетки
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.triplot(mesh.points[:, 0], mesh.points[:, 1], mesh.cells["triangle"])
ax.set_aspect("equal")
plt.show()
""")

st.write("#### Meshio")
st.write("Meshio - это универсальная библиотека Python для чтения и записи различных форматов сеток, включая GMSH. Она предоставляет унифицированный интерфейс для работы с различными форматами сеток, что позволяет упростить процесс импорта и экспорта сеток.")

st.write("Ниже приведен пример кода на языке Python, который загружает сетку из файла в формате GMSH и выводит некоторую информацию о ней, используя Meshio:")

st.code("""
import meshio

# Загрузка сетки из файла GMSH
mesh = meshio.read("mesh.msh")

# Вывод информации о сетке
print("Точки:", mesh.points.shape[0])
print("Ячейки:", mesh.cells[0].data.shape[0])
print("Тип ячеек:", mesh.cells[0].type)
""")
